/* Generated By:JavaCC: Do not edit this line. PrismParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PrismParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int COMMENT = 2;
  /** RegularExpression Id. */
  int A = 3;
  /** RegularExpression Id. */
  int ARRAY = 4;
  /** RegularExpression Id. */
  int BOOL = 5;
  /** RegularExpression Id. */
  int CLOCK = 6;
  /** RegularExpression Id. */
  int CONST = 7;
  /** RegularExpression Id. */
  int CTMC = 8;
  /** RegularExpression Id. */
  int C = 9;
  /** RegularExpression Id. */
  int DOUBLE = 10;
  /** RegularExpression Id. */
  int DTMC = 11;
  /** RegularExpression Id. */
  int E = 12;
  /** RegularExpression Id. */
  int ENDINIT = 13;
  /** RegularExpression Id. */
  int ENDINVARIANT = 14;
  /** RegularExpression Id. */
  int ENDMODULE = 15;
  /** RegularExpression Id. */
  int ENDOBSERVABLES = 16;
  /** RegularExpression Id. */
  int ENDREWARDS = 17;
  /** RegularExpression Id. */
  int ENDSYSTEM = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int FORMULA = 20;
  /** RegularExpression Id. */
  int FILTER = 21;
  /** RegularExpression Id. */
  int FUNC = 22;
  /** RegularExpression Id. */
  int F = 23;
  /** RegularExpression Id. */
  int GLOBAL = 24;
  /** RegularExpression Id. */
  int G = 25;
  /** RegularExpression Id. */
  int INIT = 26;
  /** RegularExpression Id. */
  int INVARIANT = 27;
  /** RegularExpression Id. */
  int I = 28;
  /** RegularExpression Id. */
  int INT = 29;
  /** RegularExpression Id. */
  int LABEL = 30;
  /** RegularExpression Id. */
  int MAXMAX = 31;
  /** RegularExpression Id. */
  int MAXMIN = 32;
  /** RegularExpression Id. */
  int MAX = 33;
  /** RegularExpression Id. */
  int MDP = 34;
  /** RegularExpression Id. */
  int MINMAX = 35;
  /** RegularExpression Id. */
  int MINMIN = 36;
  /** RegularExpression Id. */
  int MIN = 37;
  /** RegularExpression Id. */
  int MODULE = 38;
  /** RegularExpression Id. */
  int X = 39;
  /** RegularExpression Id. */
  int NONDETERMINISTIC = 40;
  /** RegularExpression Id. */
  int OBSERVABLE = 41;
  /** RegularExpression Id. */
  int OBSERVABLES = 42;
  /** RegularExpression Id. */
  int OF = 43;
  /** RegularExpression Id. */
  int PMAXMAX = 44;
  /** RegularExpression Id. */
  int PMAXMIN = 45;
  /** RegularExpression Id. */
  int PMAX = 46;
  /** RegularExpression Id. */
  int PMINMAX = 47;
  /** RegularExpression Id. */
  int PMINMIN = 48;
  /** RegularExpression Id. */
  int PMIN = 49;
  /** RegularExpression Id. */
  int P = 50;
  /** RegularExpression Id. */
  int POMDP = 51;
  /** RegularExpression Id. */
  int POPTA = 52;
  /** RegularExpression Id. */
  int PROBABILISTIC = 53;
  /** RegularExpression Id. */
  int PROB = 54;
  /** RegularExpression Id. */
  int PTA = 55;
  /** RegularExpression Id. */
  int RATE = 56;
  /** RegularExpression Id. */
  int REWARDS = 57;
  /** RegularExpression Id. */
  int RMAXMAX = 58;
  /** RegularExpression Id. */
  int RMAXMIN = 59;
  /** RegularExpression Id. */
  int RMAX = 60;
  /** RegularExpression Id. */
  int RMINMAX = 61;
  /** RegularExpression Id. */
  int RMINMIN = 62;
  /** RegularExpression Id. */
  int RMIN = 63;
  /** RegularExpression Id. */
  int R = 64;
  /** RegularExpression Id. */
  int S = 65;
  /** RegularExpression Id. */
  int STOCHASTIC = 66;
  /** RegularExpression Id. */
  int SYSTEM = 67;
  /** RegularExpression Id. */
  int TRUE = 68;
  /** RegularExpression Id. */
  int U = 69;
  /** RegularExpression Id. */
  int W = 70;
  /** RegularExpression Id. */
  int NOT = 71;
  /** RegularExpression Id. */
  int AND = 72;
  /** RegularExpression Id. */
  int OR = 73;
  /** RegularExpression Id. */
  int IMPLIES = 74;
  /** RegularExpression Id. */
  int IFF = 75;
  /** RegularExpression Id. */
  int RARROW = 76;
  /** RegularExpression Id. */
  int COLON = 77;
  /** RegularExpression Id. */
  int SEMICOLON = 78;
  /** RegularExpression Id. */
  int COMMA = 79;
  /** RegularExpression Id. */
  int DOTS = 80;
  /** RegularExpression Id. */
  int LPARENTH = 81;
  /** RegularExpression Id. */
  int RPARENTH = 82;
  /** RegularExpression Id. */
  int LBRACKET = 83;
  /** RegularExpression Id. */
  int RBRACKET = 84;
  /** RegularExpression Id. */
  int DLBRACKET = 85;
  /** RegularExpression Id. */
  int LBRACE = 86;
  /** RegularExpression Id. */
  int RBRACE = 87;
  /** RegularExpression Id. */
  int EQ = 88;
  /** RegularExpression Id. */
  int NE = 89;
  /** RegularExpression Id. */
  int LT = 90;
  /** RegularExpression Id. */
  int GT = 91;
  /** RegularExpression Id. */
  int DLT = 92;
  /** RegularExpression Id. */
  int DGT = 93;
  /** RegularExpression Id. */
  int LE = 94;
  /** RegularExpression Id. */
  int GE = 95;
  /** RegularExpression Id. */
  int PLUS = 96;
  /** RegularExpression Id. */
  int MINUS = 97;
  /** RegularExpression Id. */
  int TIMES = 98;
  /** RegularExpression Id. */
  int DIVIDE = 99;
  /** RegularExpression Id. */
  int PRIME = 100;
  /** RegularExpression Id. */
  int RENAME = 101;
  /** RegularExpression Id. */
  int QMARK = 102;
  /** RegularExpression Id. */
  int DQUOTE = 103;
  /** RegularExpression Id. */
  int REG_INT = 104;
  /** RegularExpression Id. */
  int REG_DOUBLE = 105;
  /** RegularExpression Id. */
  int REG_IDENT = 106;
  /** RegularExpression Id. */
  int PREPROC = 107;
  /** RegularExpression Id. */
  int LEXICAL_ERROR = 108;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<COMMENT>",
    "\"A\"",
    "\"array\"",
    "\"bool\"",
    "\"clock\"",
    "\"const\"",
    "\"ctmc\"",
    "\"C\"",
    "\"double\"",
    "\"dtmc\"",
    "\"E\"",
    "\"endinit\"",
    "\"endinvariant\"",
    "\"endmodule\"",
    "\"endobservables\"",
    "\"endrewards\"",
    "\"endsystem\"",
    "\"false\"",
    "\"formula\"",
    "\"filter\"",
    "\"func\"",
    "\"F\"",
    "\"global\"",
    "\"G\"",
    "\"init\"",
    "\"invariant\"",
    "\"I\"",
    "\"int\"",
    "\"label\"",
    "\"maxmax\"",
    "\"maxmin\"",
    "\"max\"",
    "\"mdp\"",
    "\"minmax\"",
    "\"minmin\"",
    "\"min\"",
    "\"module\"",
    "\"X\"",
    "\"nondeterministic\"",
    "\"observable\"",
    "\"observables\"",
    "\"of\"",
    "\"Pmaxmax\"",
    "\"Pmaxmin\"",
    "\"Pmax\"",
    "\"Pminmax\"",
    "\"Pminmin\"",
    "\"Pmin\"",
    "\"P\"",
    "\"pomdp\"",
    "\"popta\"",
    "\"probabilistic\"",
    "\"prob\"",
    "\"pta\"",
    "\"rate\"",
    "\"rewards\"",
    "\"Rmaxmax\"",
    "\"Rmaxmin\"",
    "\"Rmax\"",
    "\"Rminmax\"",
    "\"Rminmin\"",
    "\"Rmin\"",
    "\"R\"",
    "\"S\"",
    "\"stochastic\"",
    "\"system\"",
    "\"true\"",
    "\"U\"",
    "\"W\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"=>\"",
    "\"<=>\"",
    "\"->\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"..\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"[[\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<<\"",
    "\">>\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\\'\"",
    "\"<-\"",
    "\"?\"",
    "\"\\\"\"",
    "<REG_INT>",
    "<REG_DOUBLE>",
    "<REG_IDENT>",
    "<PREPROC>",
    "<LEXICAL_ERROR>",
  };

}
