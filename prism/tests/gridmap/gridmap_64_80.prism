mdp
const int N=64; // N*N grid map
const double p=0.1; // with probability p, a move to a neighboring state state occurs due to seeing and control noise

module robot
	//define robot position
	r:[1..N] init 1; //grid row
	c:[1..N] init 1; //grid column

	// go to the terminal state when hitting an obstacle
	[obstacle] (r=6 & c=62) | (r=56 & c=25) | (r=48 & c=6) | (r=54 & c=26) | (r=34 & c=48) | (r=36 & c=45) | (r=56 & c=4) | (r=33 & c=13) | (r=20 & c=59) | (r=60 & c=53) | (r=44 & c=27) | (r=25 & c=61) | (r=11 & c=20) | (r=32 & c=50) | (r=56 & c=59) | (r=39 & c=64) | (r=37 & c=55) | (r=54 & c=48) | (r=45 & c=64) | (r=34 & c=45) | (r=45 & c=31) | (r=8 & c=40) | (r=14 & c=59) | (r=13 & c=41) | (r=38 & c=41) | (r=59 & c=6) | (r=1 & c=6) | (r=44 & c=55) | (r=22 & c=12) | (r=41 & c=21) | (r=42 & c=25) | (r=60 & c=19) | (r=25 & c=38) | (r=19 & c=10) | (r=8 & c=15) | (r=58 & c=38) | (r=19 & c=22) | (r=24 & c=58) | (r=46 & c=51) | (r=32 & c=27) | (r=41 & c=16) | (r=53 & c=31) | (r=62 & c=32) | (r=55 & c=44) | (r=19 & c=44) | (r=18 & c=28) | (r=52 & c=58) | (r=22 & c=58) | (r=45 & c=59) | (r=45 & c=20) | (r=22 & c=59) | (r=49 & c=25) | (r=3 & c=33) | (r=12 & c=45) | (r=48 & c=46) | (r=43 & c=2) | (r=29 & c=48) | (r=62 & c=46) | (r=46 & c=13) | (r=8 & c=11) | (r=44 & c=8) | (r=45 & c=34) | (r=15 & c=46) | (r=9 & c=37) | (r=32 & c=1) | (r=12 & c=61) | (r=62 & c=13) | (r=52 & c=24) | (r=45 & c=45) | (r=56 & c=45) | (r=30 & c=26) | (r=43 & c=48) | (r=9 & c=3) | (r=59 & c=18) | (r=41 & c=58) | (r=39 & c=31) | (r=36 & c=1) | (r=47 & c=22) | (r=58 & c=53) | (r=8 & c=24)-> true;

	// transitions
	[east] (c<N | c=N) & !((r=6 & c=62) | (r=56 & c=25) | (r=48 & c=6) | (r=54 & c=26) | (r=34 & c=48) | (r=36 & c=45) | (r=56 & c=4) | (r=33 & c=13) | (r=20 & c=59) | (r=60 & c=53) | (r=44 & c=27) | (r=25 & c=61) | (r=11 & c=20) | (r=32 & c=50) | (r=56 & c=59) | (r=39 & c=64) | (r=37 & c=55) | (r=54 & c=48) | (r=45 & c=64) | (r=34 & c=45) | (r=45 & c=31) | (r=8 & c=40) | (r=14 & c=59) | (r=13 & c=41) | (r=38 & c=41) | (r=59 & c=6) | (r=1 & c=6) | (r=44 & c=55) | (r=22 & c=12) | (r=41 & c=21) | (r=42 & c=25) | (r=60 & c=19) | (r=25 & c=38) | (r=19 & c=10) | (r=8 & c=15) | (r=58 & c=38) | (r=19 & c=22) | (r=24 & c=58) | (r=46 & c=51) | (r=32 & c=27) | (r=41 & c=16) | (r=53 & c=31) | (r=62 & c=32) | (r=55 & c=44) | (r=19 & c=44) | (r=18 & c=28) | (r=52 & c=58) | (r=22 & c=58) | (r=45 & c=59) | (r=45 & c=20) | (r=22 & c=59) | (r=49 & c=25) | (r=3 & c=33) | (r=12 & c=45) | (r=48 & c=46) | (r=43 & c=2) | (r=29 & c=48) | (r=62 & c=46) | (r=46 & c=13) | (r=8 & c=11) | (r=44 & c=8) | (r=45 & c=34) | (r=15 & c=46) | (r=9 & c=37) | (r=32 & c=1) | (r=12 & c=61) | (r=62 & c=13) | (r=52 & c=24) | (r=45 & c=45) | (r=56 & c=45) | (r=30 & c=26) | (r=43 & c=48) | (r=9 & c=3) | (r=59 & c=18) | (r=41 & c=58) | (r=39 & c=31) | (r=36 & c=1) | (r=47 & c=22) | (r=58 & c=53) | (r=8 & c=24))-> p:(r'=min(r+1, N)) + (1-p): (c'=min(c+1, N));
	[south] (r<N | r=N) & !((r=6 & c=62) | (r=56 & c=25) | (r=48 & c=6) | (r=54 & c=26) | (r=34 & c=48) | (r=36 & c=45) | (r=56 & c=4) | (r=33 & c=13) | (r=20 & c=59) | (r=60 & c=53) | (r=44 & c=27) | (r=25 & c=61) | (r=11 & c=20) | (r=32 & c=50) | (r=56 & c=59) | (r=39 & c=64) | (r=37 & c=55) | (r=54 & c=48) | (r=45 & c=64) | (r=34 & c=45) | (r=45 & c=31) | (r=8 & c=40) | (r=14 & c=59) | (r=13 & c=41) | (r=38 & c=41) | (r=59 & c=6) | (r=1 & c=6) | (r=44 & c=55) | (r=22 & c=12) | (r=41 & c=21) | (r=42 & c=25) | (r=60 & c=19) | (r=25 & c=38) | (r=19 & c=10) | (r=8 & c=15) | (r=58 & c=38) | (r=19 & c=22) | (r=24 & c=58) | (r=46 & c=51) | (r=32 & c=27) | (r=41 & c=16) | (r=53 & c=31) | (r=62 & c=32) | (r=55 & c=44) | (r=19 & c=44) | (r=18 & c=28) | (r=52 & c=58) | (r=22 & c=58) | (r=45 & c=59) | (r=45 & c=20) | (r=22 & c=59) | (r=49 & c=25) | (r=3 & c=33) | (r=12 & c=45) | (r=48 & c=46) | (r=43 & c=2) | (r=29 & c=48) | (r=62 & c=46) | (r=46 & c=13) | (r=8 & c=11) | (r=44 & c=8) | (r=45 & c=34) | (r=15 & c=46) | (r=9 & c=37) | (r=32 & c=1) | (r=12 & c=61) | (r=62 & c=13) | (r=52 & c=24) | (r=45 & c=45) | (r=56 & c=45) | (r=30 & c=26) | (r=43 & c=48) | (r=9 & c=3) | (r=59 & c=18) | (r=41 & c=58) | (r=39 & c=31) | (r=36 & c=1) | (r=47 & c=22) | (r=58 & c=53) | (r=8 & c=24))-> (1-p):(r'=min(r+1, N)) + p: (c'=min(c+1, N));
	[west]  (c<1 | c=1) & !((r=6 & c=62) | (r=56 & c=25) | (r=48 & c=6) | (r=54 & c=26) | (r=34 & c=48) | (r=36 & c=45) | (r=56 & c=4) | (r=33 & c=13) | (r=20 & c=59) | (r=60 & c=53) | (r=44 & c=27) | (r=25 & c=61) | (r=11 & c=20) | (r=32 & c=50) | (r=56 & c=59) | (r=39 & c=64) | (r=37 & c=55) | (r=54 & c=48) | (r=45 & c=64) | (r=34 & c=45) | (r=45 & c=31) | (r=8 & c=40) | (r=14 & c=59) | (r=13 & c=41) | (r=38 & c=41) | (r=59 & c=6) | (r=1 & c=6) | (r=44 & c=55) | (r=22 & c=12) | (r=41 & c=21) | (r=42 & c=25) | (r=60 & c=19) | (r=25 & c=38) | (r=19 & c=10) | (r=8 & c=15) | (r=58 & c=38) | (r=19 & c=22) | (r=24 & c=58) | (r=46 & c=51) | (r=32 & c=27) | (r=41 & c=16) | (r=53 & c=31) | (r=62 & c=32) | (r=55 & c=44) | (r=19 & c=44) | (r=18 & c=28) | (r=52 & c=58) | (r=22 & c=58) | (r=45 & c=59) | (r=45 & c=20) | (r=22 & c=59) | (r=49 & c=25) | (r=3 & c=33) | (r=12 & c=45) | (r=48 & c=46) | (r=43 & c=2) | (r=29 & c=48) | (r=62 & c=46) | (r=46 & c=13) | (r=8 & c=11) | (r=44 & c=8) | (r=45 & c=34) | (r=15 & c=46) | (r=9 & c=37) | (r=32 & c=1) | (r=12 & c=61) | (r=62 & c=13) | (r=52 & c=24) | (r=45 & c=45) | (r=56 & c=45) | (r=30 & c=26) | (r=43 & c=48) | (r=9 & c=3) | (r=59 & c=18) | (r=41 & c=58) | (r=39 & c=31) | (r=36 & c=1) | (r=47 & c=22) | (r=58 & c=53) | (r=8 & c=24))-> p:(r'=max(r-1, 1)) + (1-p): (c'=max(c-1, 1));
	[north] (r=1 | r>1) & !((r=6 & c=62) | (r=56 & c=25) | (r=48 & c=6) | (r=54 & c=26) | (r=34 & c=48) | (r=36 & c=45) | (r=56 & c=4) | (r=33 & c=13) | (r=20 & c=59) | (r=60 & c=53) | (r=44 & c=27) | (r=25 & c=61) | (r=11 & c=20) | (r=32 & c=50) | (r=56 & c=59) | (r=39 & c=64) | (r=37 & c=55) | (r=54 & c=48) | (r=45 & c=64) | (r=34 & c=45) | (r=45 & c=31) | (r=8 & c=40) | (r=14 & c=59) | (r=13 & c=41) | (r=38 & c=41) | (r=59 & c=6) | (r=1 & c=6) | (r=44 & c=55) | (r=22 & c=12) | (r=41 & c=21) | (r=42 & c=25) | (r=60 & c=19) | (r=25 & c=38) | (r=19 & c=10) | (r=8 & c=15) | (r=58 & c=38) | (r=19 & c=22) | (r=24 & c=58) | (r=46 & c=51) | (r=32 & c=27) | (r=41 & c=16) | (r=53 & c=31) | (r=62 & c=32) | (r=55 & c=44) | (r=19 & c=44) | (r=18 & c=28) | (r=52 & c=58) | (r=22 & c=58) | (r=45 & c=59) | (r=45 & c=20) | (r=22 & c=59) | (r=49 & c=25) | (r=3 & c=33) | (r=12 & c=45) | (r=48 & c=46) | (r=43 & c=2) | (r=29 & c=48) | (r=62 & c=46) | (r=46 & c=13) | (r=8 & c=11) | (r=44 & c=8) | (r=45 & c=34) | (r=15 & c=46) | (r=9 & c=37) | (r=32 & c=1) | (r=12 & c=61) | (r=62 & c=13) | (r=52 & c=24) | (r=45 & c=45) | (r=56 & c=45) | (r=30 & c=26) | (r=43 & c=48) | (r=9 & c=3) | (r=59 & c=18) | (r=41 & c=58) | (r=39 & c=31) | (r=36 & c=1) | (r=47 & c=22) | (r=58 & c=53) | (r=8 & c=24))-> (1-p):(r'=max(r-1, 1)) + p: (c'=max(c-1, 1));

	// terminal state self-loop to avoid deadlock
	[] r=N & c=N -> true;

endmodule

label "goal" = r=N & c=N;

rewards
	[east] true : 1;
	[south] true : 1;
	[west] true : 1;
	[north] true : 1;
	[obstacle] true : 40;
endrewards
