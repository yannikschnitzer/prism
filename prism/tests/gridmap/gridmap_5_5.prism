mdp
const int N=5; // N*N grid map
const double p=0.1; // with probability p, a move to a neighboring state state occurs due to seeing and control noise

module robot
	//define robot position
	r:[1..N] init 1; //grid row
	c:[1..N] init 1; //grid column

	// go to the terminal state when hitting an obstacle
	[obstacle] (r=1 & c=5) | (r=1 & c=4) | (r=4 & c=3) | (r=3 & c=5) | (r=4 & c=5)-> (r'=5) & (c'=1);

	// transitions
	[east] (c<N | c=N) & !((r=1 & c=5) | (r=1 & c=4) | (r=4 & c=3) | (r=3 & c=5) | (r=4 & c=5))-> p:(r'=min(r+1, N)) + (1-p): (c'=min(c+1, N));
	[south] (r<N | r=N) & !((r=1 & c=5) | (r=1 & c=4) | (r=4 & c=3) | (r=3 & c=5) | (r=4 & c=5))-> (1-p):(r'=min(r+1, N)) + p: (c'=min(c+1, N));
	[west]  (c>1 | c=1) & !((r=1 & c=5) | (r=1 & c=4) | (r=4 & c=3) | (r=3 & c=5) | (r=4 & c=5))-> p:(r'=max(r-1, 1)) + (1-p): (c'=max(c-1, 1));
	[north] (r=1 | r>1) & !((r=1 & c=5) | (r=1 & c=4) | (r=4 & c=3) | (r=3 & c=5) | (r=4 & c=5))-> (1-p):(r'=max(r-1, 1)) + p: (c'=max(c-1, 1));

	// terminal state self-loop to avoid deadlock
	[] r=5 & c=1 -> true;
endmodule

label "goal" = r=5 & c=1;

rewards
	[east] true : 1;
	[south] true : 1;
	[west] true : 1;
	[north] true : 1;
	[obstacle] true : 30.0;
endrewards
