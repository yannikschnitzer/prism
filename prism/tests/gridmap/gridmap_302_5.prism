mdp
const int N=302; // N*N grid map
const double p=0.1; // with probability p, a move to a neighboring state state occurs due to seeing and control noise

module robot
	//define robot position
	r:[1..N] init 1; //grid row
	c:[1..N] init 1; //grid column

	// go to the terminal state when hitting an obstacle
	[obstacle] (r=142 & c=37) | (r=138 & c=32) | (r=102 & c=58) | (r=169 & c=6) | (r=234 & c=95) | (r=130 & c=120) | (r=242 & c=117) | (r=122 & c=155) | (r=195 & c=106) | (r=219 & c=164) | (r=185 & c=126) | (r=88 & c=258)-> (r'=302) & (c'=1);

	// transitions
	[east] (c<N | c=N) & !((r=142 & c=37) | (r=138 & c=32) | (r=102 & c=58) | (r=169 & c=6) | (r=234 & c=95) | (r=130 & c=120) | (r=242 & c=117) | (r=122 & c=155) | (r=195 & c=106) | (r=219 & c=164) | (r=185 & c=126) | (r=88 & c=258))-> p/3:(r'=min(r+1, N))+ p/3: (c'=max(c-1, 1))+ p/3: (r'=max(r-1, 1)) + (1-p): (c'=min(c+1, N));
	[south] (r<N | r=N) & !((r=142 & c=37) | (r=138 & c=32) | (r=102 & c=58) | (r=169 & c=6) | (r=234 & c=95) | (r=130 & c=120) | (r=242 & c=117) | (r=122 & c=155) | (r=195 & c=106) | (r=219 & c=164) | (r=185 & c=126) | (r=88 & c=258))-> (1-p):(r'=min(r+1, N)) + p/3: (c'=min(c+1, N)) + p/3:(r'=min(r+1, N))+ p/3: (c'=max(c-1, 1));
	[west]  (c>1 | c=1) & !((r=142 & c=37) | (r=138 & c=32) | (r=102 & c=58) | (r=169 & c=6) | (r=234 & c=95) | (r=130 & c=120) | (r=242 & c=117) | (r=122 & c=155) | (r=195 & c=106) | (r=219 & c=164) | (r=185 & c=126) | (r=88 & c=258))-> p/3:(r'=max(r-1, 1))+ p/3:(r'=min(r+1, N))+ p/3: (c'=min(c+1, N)) + (1-p): (c'=max(c-1, 1));
	[north] (r=1 | r>1) & !((r=142 & c=37) | (r=138 & c=32) | (r=102 & c=58) | (r=169 & c=6) | (r=234 & c=95) | (r=130 & c=120) | (r=242 & c=117) | (r=122 & c=155) | (r=195 & c=106) | (r=219 & c=164) | (r=185 & c=126) | (r=88 & c=258))-> (1-p):(r'=max(r-1, 1)) + p/3: (c'=max(c-1, 1)) + p/3: (c'=min(c+1, N)) + p/3:(r'=min(r+1, N));

	// terminal state self-loop to avoid deadlock
	[] r=302 & c=1 -> true;
endmodule

label "goal" = r=302 & c=1;

rewards
	[east] true : 1;
	[south] true : 1;
	[west] true : 1;
	[north] true : 1;
	[obstacle] true : 60.0;
endrewards
