pomdp
observables
started, r3taken, done
endobservables
const int N;
const int xMAX = N-1;
const int yMAX = N-1;
const int xMIN = 0;
const int yMIN = 0;
const double slippery = 0.1;
// How likely is a rock a good rock
const double goodrock = 0.5;
const int primaryMinX = 0;
const int primaryMinY = 4;
const int primaryMaxX = 3;
const int primaryMaxY = 7;
const int borderSize = 2;
const int areaMinX = max(primaryMinX - borderSize, xMIN);
const int areaMinY = max(primaryMinY - borderSize, yMIN);
const int areaMaxX = min(primaryMaxX + borderSize, xMAX);
const int areaMaxY = min(primaryMaxY + borderSize, yMAX);
const r3x = 3;
const r3y = 5;
// We are done when we reach max x location
formula finish = started & (!bad) & (x = xMAX | x = primaryMinX - 1 | x = primaryMinX - 2| y = primaryMinY - 1 | y = primaryMinY - 2 | x = primaryMaxX + 1 | x = primaryMaxX + 2| y = primaryMaxY + 1 | y = primaryMaxY + 2);
observable "seefinish" = finish;
formula maxdist = xMAX-xMIN+yMAX-yMIN;
formula good = finish & done;
formula r3dist = max(r3x-x,x-r3x) + max(r3y-y,y-r3y);
formula bad = (r3dist=0 & !r3qual);
formula normdistr3 = (r3dist <= 1) ? 1 : 2; // min(1+((r3dist-1)/maxdist), 1.0)
observable "atr3" = r3dist <= 0;
observable "nearr3" = r3dist <= 1;
observable "seebad" = bad;
observable "seegood" = good;
module master
started : bool init false;
done : bool init false;

[placement] !started -> (started'=true);
[north] started & !done -> true;
[south] started  & !done -> true;
[east] started  & !done-> true;
[west] started & !done -> true;
[finish] finish | done -> (done'=true);
endmodule
module robot
x : [areaMinX..areaMaxX] init primaryMinX;
y : [areaMinY..areaMaxX] init primaryMaxX;

[west] true -> (1-slippery): (x'=max(x-1,areaMinX)) + slippery: (x'=max(x-2,areaMinX));
[east] true -> (1-slippery): (x'=min(x+1,areaMaxX)) + slippery: (x'=min(x+2,areaMaxX));
[south]  true -> (1-slippery): (y'=min(y+1,areaMaxY)) + slippery: (y'=min(y+2,areaMaxY));
[north]  true -> (1-slippery): (y'=max(y-1,areaMinY)) + slippery: (y'=max(y-2,areaMinY));
endmodule
module rock3
r3qual : bool init false;
r3taken : bool init false;
r3lastobs : bool init false;
[placement] true -> goodrock : (r3qual'=true) + (1-goodrock) : (r3qual'=false);

[r3sample] r3dist = 0 & started & !done & !bad & !finish & !r3taken-> 1:(r3taken'=(x = r3x & y = r3y & !r3taken));
[r3sample] r3dist = 0 & started & !done & !bad & !finish & r3taken -> true;

[r3sense] started & !r3taken & !done & !bad & !finish -> (1/normdistr3): (r3lastobs'=r3qual) +  (1-(1/normdistr3)): (r3lastobs'=!r3qual);
[north] true -> (r3lastobs'=false);
[south] true -> (r3lastobs'=false);
[east] true -> (r3lastobs'=false);
[west] true -> (r3lastobs'=false);
endmodule
label "notbad" = !bad;
label "goal" = good;
label "rockposition" = (!r3taken & r3x = x & r3y = y);
rewards "rew"
[r3sample] r3qual & !r3taken : 100;
[finish] ((!r3qual) | (r3taken)): 100;
[finish] true: 20;
endrewards
rewards "cos"
//[r1sample] !r1qual & !r1taken : 10; // no need; cause it won't r1sample is not enabled if !r1qual
//[r2sample] !r2qual & !r1taken: 10; // no need; cause it won't r1sample is not enabled if !r1qual
//[r1sample] r1taken : 20;
//[r2sample] r2taken : 20;
[finish] !((!r3qual) | (r3taken)): 100;
bad:20;
[east] true: 1;
[west] true: 1;
[north] true: 1;
[south] true: 1;
[r3sense] true: 1;
[r3sample] true: 1;
endrewards
