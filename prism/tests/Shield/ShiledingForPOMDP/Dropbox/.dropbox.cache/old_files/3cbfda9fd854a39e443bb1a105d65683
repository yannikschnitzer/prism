{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5da91c01",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rock_utility import *\n",
    "#import rock_utility\n",
    "#print(dir(rock_utility))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c4bbb84c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# generate_rock_file(N, R, is_main, lx, ly, rx, ry, file = sys.stdout):\n",
    "import os\n",
    "N = 8; R = 2\n",
    "shieldSize = 4\n",
    "shieldSizeX = 4\n",
    "shieldSizeY = 4   \n",
    "xMAX = N - 1\n",
    "yMAX = N - 1\n",
    "is_main = False\n",
    "\n",
    "for lx in range(0, xMAX, shieldSizeX):\n",
    "  for ly in range(0, yMAX, shieldSizeY):\n",
    "    rx, ry = lx + shieldSizeX - 1, ly + shieldSizeY - 1\n",
    "\n",
    "    file_path = \"N{}R{}/\".format(N, R)\n",
    "    if not os.path.exists(file_path):\n",
    "        os.makedirs(file_path)\n",
    "    winning_path = file_path + \"winningregion/\"\n",
    "    if not os.path.exists(winning_path):\n",
    "        os.makedirs(winning_path)\n",
    "    \n",
    "    file_name = file_path + \"rocks_N{}R{}_factored-{}-{}-{}-{}-{}.nm\".format(N, R, shieldSize, lx, ly, rx, ry)\n",
    "\n",
    "    with open(file_name, 'w') as file:\n",
    "      generate_rock_file(N, R, is_main, lx, ly, rx, ry, file = file)\n",
    "      obstacles = generate_rocks(N, R, file)\n",
    "    file.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
