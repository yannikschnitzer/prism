{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "cd783441",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_board(obstacle, beliefState, agent, N):\n",
    "\n",
    "  from matplotlib import pyplot as plt\n",
    "  fig, ax = plt.subplots(figsize = (min(N,100),min(N,100)))\n",
    "  #ax.xaxis.set_ticks_position('top')   #将X坐标轴移到上面\n",
    "  ax.invert_yaxis()  \n",
    "  #\n",
    "  x = [i for i in range(N)]\n",
    "  y = [i for i in range(N)]\n",
    "  plt.xlim((0,N))\n",
    "  #plt.ylim((0,N))\n",
    "  ax.set_ylim(bottom=N, top=0)  # 此处将原点设置为左上角  \n",
    "  plt.xticks([0.5 + i for i in range(N )], labels = [str(i) for i in range(N)])\n",
    "  plt.yticks([0.5 + i for i in range(N)], labels = [str(i) for i in range(N)])\n",
    "  plt.xlabel('X Axis')\n",
    "  plt.ylabel('Y Axis')\n",
    "  width = 1\n",
    "  height =1 \n",
    "\n",
    "  for left, bottom in obstacle:\n",
    "    rect = plt.Rectangle((left, bottom), width, height, facecolor=\"red\", alpha = 1)\n",
    "    ax.add_patch(rect)\n",
    "\n",
    "  for left, bottom in beliefState:\n",
    "    rect = plt.Rectangle((left, bottom), width, height, facecolor=\"blue\", alpha = 0.5)\n",
    "    ax.add_patch(rect)\n",
    "\n",
    "  #plt.scatter(agent[0] + 0.5, agent[1] +0.5)\n",
    "  for i in range(N):\n",
    "    plt.hlines(i, 0, N , alpha = 0.5)\n",
    "    plt.vlines(i, 0, N , alpha = 0.5)\n",
    "  plt.grid(False)\n",
    "  plt.savefig(\"obstacle_\"+str(N)+\".jpg\")  \n",
    "  plt.show()\n",
    "\n",
    "\n",
    "def move(belief, action):\n",
    "  result = set()\n",
    "  for x, y in belief:\n",
    "    for slip in [1, 2]:\n",
    "      if action == \"w\":\n",
    "        nx, ny = max(0, x - slip) , y\n",
    "      if action == 'e':\n",
    "        nx, ny = min(N - 1, x + slip), y\n",
    "      if action == 'n':\n",
    "        nx, ny = x, max(0, y - slip)\n",
    "      if action == 's':\n",
    "        nx, ny = x, min(N - 1, y + slip)\n",
    "      result.add((nx, ny))\n",
    "  return list(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "86b8c9dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preamble(f):\n",
    "    print(\"pomdp\", file = f)\n",
    "    print(\"observables\", file = f)\n",
    "    print(\"start\", file = f)\n",
    "    print(\"endobservables\", file = f)\n",
    "    \n",
    "def const(f, is_main):\n",
    "    print(\"const int N;\", file = f)\n",
    "    print(\"const int axMAX = N-1;\", file = f)\n",
    "    print(\"const int ayMAX = N-1;\", file = f)\n",
    "    print(\"const int axMIN = 0;\", file = f)\n",
    "    print(\"const int ayMIN = 0;\", file = f)\n",
    "    if is_main:\n",
    "        print(\"const int primaryMinX = axMIN;\", file = f)\n",
    "        print(\"const int primaryMinY = ayMIN;\", file = f)\n",
    "        print(\"const int primaryMaxX = axMAX;\", file = f)\n",
    "        print(\"const int primaryMaxY = ayMAX;\", file = f)\n",
    "    else:\n",
    "        print(\"const int primaryMinX;\", file = f)\n",
    "        print(\"const int primaryMinY;\", file = f)\n",
    "        print(\"const int primaryMaxX;\", file = f)\n",
    "        print(\"const int primaryMaxY;\", file = f)\n",
    "    print(\"const int borderSize = 2;\", file = f)\n",
    "    print(\"const int areaMinX = max(primaryMinX - borderSize, axMIN);\", file = f)\n",
    "    print(\"const int areaMinY = max(primaryMinY - borderSize, ayMIN);\", file = f)\n",
    "    print(\"const int areaMaxX = min(primaryMaxX + borderSize, axMAX);\", file = f)\n",
    "    print(\"const int areaMaxY = min(primaryMaxY + borderSize, ayMAX);\", file = f)\n",
    "    print(\"const double slippery = 0.1;\", file = f)\n",
    "    \n",
    "def const_obstacles(obstacles, f):\n",
    "    for i, (x, y) in enumerate(obstacles):\n",
    "        print(\"const int ob{}x = {};\".format(i, x), file = f)\n",
    "        print(\"const int ob{}y = {};\".format(i, y), file = f)\n",
    "\n",
    "def generate(N, n_obs, n_belief, is_main):\n",
    "    if N == 6:\n",
    "        axMAX, ayMAX, axMIN, ayMIN = N - 1, N - 1, 0, 0\n",
    "        obstacle = [(axMAX - 1, ayMAX - 1), (axMAX, ayMIN + 1), \n",
    "                    (axMIN + 1, ayMIN), (axMAX, axMAX - 1),(axMAX -3, ayMAX -1)]\n",
    "        belief = [(axMAX - 2, ayMAX - 1), (1, 1), (2,1), (1,3)]\n",
    "        return obstacle, belief\n",
    "    \n",
    "    \n",
    "    import random\n",
    "    random.seed(N)\n",
    "    axMax = ayMax = N - 1\n",
    "    \n",
    "    obstacles = set()\n",
    "    while len(obstacles) < n_obs:\n",
    "        ox = random.randint(0, axMax)\n",
    "        oy = random.randint(0, ayMax)\n",
    "        if ox == N - 1 and oy == N - 1:\n",
    "            continue\n",
    "        obstacles.add((ox, oy))\n",
    "        \n",
    "    if N == 50:\n",
    "        belief = [(12, 43), (33, 3), (26, 29), (16, 33), (5, 41)]\n",
    "        return obstacles, belief\n",
    "\n",
    "    \n",
    "    belief = set()\n",
    "    if is_main:\n",
    "        while len(belief) < n_belief:\n",
    "            bx = random.randint(0, axMax)\n",
    "            by = random.randint(0, ayMax)\n",
    "            if (bx, by) in obstacles or (bx == N - 1 and by == N -1):\n",
    "                continue\n",
    "            belief.add((bx, by))\n",
    "    \n",
    "    return obstacles, belief\n",
    "\n",
    "def formula_crash(obstacles, f):\n",
    "    crash = []\n",
    "    for i in range(len(obstacles)):\n",
    "        item = \"(ax = ob\" + str(i) + \"x & \"\n",
    "        item += \"ay = ob\" + str(i) + \"y)\" \n",
    "        crash.append(item)\n",
    "    crash = \"formula crash = start & (\" + \"|\".join(crash) + \");\"\n",
    "    print(crash, file = f)\n",
    "    \n",
    "def formula_done(f, is_main):####\n",
    "    if is_main:\n",
    "        done = \"formula done = start & ax = axMAX &  ay = ayMAX ;\"\n",
    "    else:\n",
    "        done =  \"formula done = start & (!crash) & ((ax = axMAX & ay = ayMAX) | \"\n",
    "        done += \"ax = primaryMaxX + 1 | ax = primaryMaxX + 2 | ay = primaryMaxY + 1 | ay = primaryMaxY + 2 |\"\n",
    "        done += \"ax = primaryMinX - 1 | ax = primaryMinX - 2 | ay = primaryMinY - 1 | ay = primaryMinY - 2 ) ;\"\n",
    "    print(done, file = f)\n",
    "    \n",
    "def observable(f):\n",
    "    print(\"observable \\\"amdone\\\" = done;\", file = f)\n",
    "    print(\"observable \\\"hascrash\\\" = crash;\", file = f)\n",
    "\n",
    "def master(f):\n",
    "    print(\"module master\", file = f)\n",
    "    print(\"start : bool init false;\", file = f)\n",
    "    print(\"[placement] !start -> (start\\'=true);\", file = f)\n",
    "    print(\"[north] start & !done -> true;\", file = f)\n",
    "    print(\"[south] start  & !done -> true;\", file = f)\n",
    "    print(\"[east] start  & !done-> true;\", file = f)\n",
    "    print(\"[west] start & !done -> true;\", file = f)\n",
    "    print(\"endmodule\", file = f)\n",
    "\n",
    "def robot(initial, is_main, f):#####\n",
    "    print(\"module robot\", file = f)\n",
    "    print(\"ax : [axMIN..axMAX] init axMIN;\", file = f)\n",
    "    print(\"ay : [ayMIN..ayMAX] init ayMIN;\", file = f)\n",
    "    print(\"//slipped : bool init false;\", file = f)\n",
    "    \n",
    "    if is_main:\n",
    "        #print(\"[placement] true -> (ax\\'=axMIN) & (ay\\'=ayMIN);\", file = f)\n",
    "        initial_place = \"[placement] true ->\"\n",
    "        for i, (x, y) in enumerate(initial):\n",
    "            initial_place += \" 1/{}:(ax\\'={}) & (ay\\'={}) +\".format(len(initial), x, y) \n",
    "        initial_place = initial_place[0:-1] + \";\"\n",
    "        print(initial_place, file = f) # TODO how to ensure it is safe ##\n",
    "\n",
    "\n",
    "    else:####\n",
    "        initial_place = [\"1/4:(ax\\'=primaryMinX) & (ay\\'=primaryMinY)\", \"1/4:(ax\\'=primaryMinX) & (ay\\'=primaryMaxY)\",\n",
    "                         \"1/4:(ax\\'=primaryMaxX) & (ay\\'=primaryMinY)\", \"1/4:(ax\\'=primaryMaxX) & (ay\\'=primaryMaxY)\"]\n",
    "        \n",
    "        #initial_place = [\"1/2:(ax\\'=primaryMinX) & (ay\\'=primaryMaxY)\",\n",
    "        #                 \"1/2:(ax\\'=primaryMaxX) & (ay\\'=primaryMinY)\"]\n",
    "        \n",
    "        print(\"[placement] true ->\" + \" + \".join(initial_place) + \";\", file = f)\n",
    "\n",
    "    print(\"[west] true -> (1-slippery): (ax\\'=max(ax-1,areaMinX)) + slippery: (ax\\'=max(ax-2,areaMinX));\", file = f)\n",
    "    print(\"[east] true -> (1-slippery): (ax\\'=min(ax+1,areaMaxX)) + slippery: (ax\\'=min(ax+2,areaMaxX));\", file = f)\n",
    "    print(\"[south]  true -> (1-slippery): (ay\\'=min(ay+1,areaMaxY)) + slippery: (ay\\'=min(ay+2,areaMaxY));\", file = f)\n",
    "    print(\"[north]  true -> (1-slippery): (ay\\'=max(ay-1,areaMinY)) + slippery: (ay\\'=max(ay-2,areaMinY));\", file = f)\n",
    "    print(\"endmodule\", file = f)\n",
    "\n",
    "\n",
    "def label(f):\n",
    "    print(\"label \\\"goal\\\" = done;\", file = f)\n",
    "    print(\"label \\\"traps\\\" = crash;\", file = f)\n",
    "    print(\"label \\\"notbad\\\" =  !crash;\", file = f)\n",
    "\n",
    "def reward(f, crash):\n",
    "    print(\"rewards \\\"cost\\\"\", file = f)\n",
    "    print(\"[north] true : 1;\", file = f)\n",
    "    print(\"[south] true : 1;\", file = f)\n",
    "    print(\"[west] true : 1;\", file = f)\n",
    "    print(\"[east] true : 1;\", file = f)\n",
    "    print(\"crash: {};\".format(crash), file = f)\n",
    "    print(\"endrewards\", file = f)\n",
    "    \n",
    "    print(\"rewards \\\"cos\\\"\", file = f)\n",
    "    print(\"[north] true : 1;\", file = f)\n",
    "    print(\"[south] true : 1;\", file = f)\n",
    "    print(\"[west] true : 1;\", file = f)\n",
    "    print(\"[east] true : 1;\", file = f)\n",
    "    print(\"crash: {};\".format(crash), file = f)\n",
    "    print(\"endrewards\", file = f)   \n",
    "    \n",
    "    print(\"rewards \\\"rew\\\"\", file = f)\n",
    "    print(\"done \")\n",
    "    print(\"endrewards\", file = f)\n",
    "    \n",
    "def display(filename):\n",
    "    file1 = open(filename, 'r')\n",
    "    Lines = file1.readlines()\n",
    "    count = 0\n",
    "    # Strips the newline character\n",
    "    for line in Lines:\n",
    "        count += 1\n",
    "        print(\"Line{}: {}\".format(count, line.strip()))\n",
    "    file1.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "9f6cb37b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(12, 43), (33, 3), (26, 29), (16, 33), (5, 41)]\n",
      "[(12, 43), (33, 3), (26, 29), (16, 33), (5, 41)]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 3600x3600 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def main(file_name = \"\", N = 6, primaryMinX = None, primaryMinY = None, primaryMaxX = None, primaryMaxY = None, is_main = True, crash = 5):\n",
    "    \n",
    "    file_name += \"./N\" + str(N)+\"/\"\n",
    "    if is_main:\n",
    "        file_name += \"obstacle_\" + str(N) + \"_centralized\"\n",
    "    else:\n",
    "        file_name += \"obstacle_\" + str(N) + \"_factored\"\n",
    "    \n",
    "    n_obs = N\n",
    "    n_belief = 5\n",
    "    \n",
    "    obstacles, initial = generate(N, n_obs, n_belief, is_main)\n",
    "    \n",
    "    with open(file_name + '.nm', 'w') as f:\n",
    "        preamble(f)\n",
    "        const(f, is_main)\n",
    "        const_obstacles(obstacles, f)\n",
    "        formula_crash(obstacles, f)\n",
    "        formula_done(f, is_main)\n",
    "        observable(f)\n",
    "        master(f)\n",
    "        robot(initial, is_main, f) # if main file, specify the intial states; else local files, intitial states no matter\n",
    "        label(f)\n",
    "        reward(f, crash)\n",
    "    f.close()\n",
    "    print(initial)\n",
    "    #display(file_name + '.nm')\n",
    "    if is_main:\n",
    "        plot_board(obstacles, initial, (0, 0), N)\n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    \n",
    "    grid =[\n",
    "#         6, \n",
    "        50,\n",
    "#         100,\n",
    "#         500\n",
    "    ]\n",
    "    \n",
    "    for N in grid:\n",
    "        main(N = N, is_main = False)\n",
    "        main(N = N, is_main = True)\n",
    "\n",
    "\n",
    "    #main(N = 50, is_main = True)\n",
    "    #main(N = 50, is_main = False)\n",
    "\n",
    "#     main(N = 100, is_main = True)\n",
    "#     main(N = 100, is_main = False)\n",
    "\n",
    "\n",
    "#     main(N = 1000, is_main = True)\n",
    "#     main(N = 1000, is_main = False)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "bcb14a39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imageio in /Users/shengsheng/opt/anaconda3/lib/python3.9/site-packages (2.9.0)\n",
      "Requirement already satisfied: numpy in /Users/shengsheng/opt/anaconda3/lib/python3.9/site-packages (from imageio) (1.21.5)\n",
      "Requirement already satisfied: pillow in /Users/shengsheng/opt/anaconda3/lib/python3.9/site-packages (from imageio) (9.0.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install imageio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "b97d78c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0001000000000000000000000000000000000000000000000000000000000000\n"
     ]
    }
   ],
   "source": [
    "def index_to_num(index):\n",
    "    tp = 0\n",
    "    for i in index:\n",
    "        bucket = i // 64\n",
    "        indexInBucket = 63 - (i - 64 * bucket)\n",
    "        tp += 2 ** indexInBucket\n",
    "    return tp\n",
    "index_to_num([3])\n",
    "\n",
    "def num_to_bin(num):\n",
    "    tp = bin(num).replace(\"0b\", \"\")\n",
    "    while len(tp) < 64:\n",
    "        tp = '0' + tp\n",
    "    return tp\n",
    "\n",
    "a= num_to_bin(num)\n",
    "len(a)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "1acd8ea1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0001000000000000000000000000000000000000000000000000000000000000 64\n",
      "1000101100000000000000000000000000000000000000000000000000000000 64\n",
      "1000110100000000000000000000000000000000000000000000000000000000 64\n",
      "1100100000000000000000000000000000000000000000000000000000000000 64\n",
      "1111111110000000000000000000000000000000000000000000000000000000 64\n"
     ]
    }
   ],
   "source": [
    "nums = [index_to_num([3]), 10016005571271983104, 10160120759347838976, 14411518807585587200, 18410715276690587648]\n",
    "for n in nums:\n",
    "    binary = num_to_bin(n)\n",
    "    print(binary, len(binary))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
