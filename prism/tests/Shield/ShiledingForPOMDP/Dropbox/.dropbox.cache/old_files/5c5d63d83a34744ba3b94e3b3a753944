{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3433a6bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rock_utility import *\n",
    "import rock_utility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5415653",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'N8R3/rocks_N8R3_factored-4-0-0-3-3.nm'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[0;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (lx \u001b[38;5;241m==\u001b[39m ly \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m):\n\u001b[1;32m     14\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[0;32m---> 15\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mfile_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mw\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[1;32m     16\u001b[0m   generate_rock_file(N, R, is_main, lx, ly, rx, ry, file \u001b[38;5;241m=\u001b[39m file)\n\u001b[1;32m     17\u001b[0m   obstacles \u001b[38;5;241m=\u001b[39m generate_rocks(N, R, file)\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'N8R3/rocks_N8R3_factored-4-0-0-3-3.nm'"
     ]
    }
   ],
   "source": [
    "# generate_rock_file(N, R, is_main, lx, ly, rx, ry, file = sys.stdout):\n",
    "N = 8; R = 3\n",
    "shieldSize = 4\n",
    "shieldSizeX = 4\n",
    "shieldSizeY = 4   \n",
    "xMAX = N - 1\n",
    "yMAX = N - 1\n",
    "is_main = False\n",
    "for lx in range(0, xMAX, shieldSizeX):\n",
    "  for ly in range(0, yMAX, shieldSizeY):\n",
    "    rx, ry = lx + shieldSizeX - 1, ly + shieldSizeY - 1\n",
    "    file_name = \"N{}R{}/rocks_N{}R{}_factored-{}-{}-{}-{}-{}.nm\".format(N, R, N, R, shieldSize, lx, ly, rx, ry)\n",
    "    if not (lx == ly == 0):\n",
    "        continue\n",
    "    with open(file_name, 'w') as file:\n",
    "      generate_rock_file(N, R, is_main, lx, ly, rx, ry, file = file)\n",
    "      obstacles = generate_rocks(N, R, file)\n",
    "      reward_cost(R, obstacles, lx, ly, rx, ry, file)\n",
    "    file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "197a0cca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'constants', 'cost', 'cost_2', 'formula_bad', 'formula_dist', 'formula_finish', 'formula_good', 'formula_maxdist', 'formula_normdist', 'formula_observable', 'generate_rock_file', 'generate_rocks', 'grid', 'in_bound', 'labels', 'master', 'move', 'observable_at', 'observable_finish', 'observable_good_bad', 'observable_near', 'one_rock', 'plot_board', 'preamble', 'primary_grid', 'reward', 'reward_cost', 'robot', 'rock_positions', 'rocks', 'sys']\n"
     ]
    }
   ],
   "source": [
    "print(dir(rock_utility))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
