{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75231ed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rock_utility import *\n",
    "import rock_utility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4f88625c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pomdp\n",
      "observables\n",
      "started, r1taken, done\n",
      "endobservables\n",
      "const int N;\n",
      "const int xMAX = N-1;\n",
      "const int yMAX = N-1;\n",
      "const int xMIN = 0;\n",
      "const int yMIN = 0;\n",
      "const double slippery = 0.1;\n",
      "// How likely is a rock a good rock\n",
      "const double goodrock = 0.5;\n",
      "const int primaryMinX = 0;\n",
      "const int primaryMinY = 0;\n",
      "const int primaryMaxX = 3;\n",
      "const int primaryMaxY = 3;\n",
      "const int borderSize = 2;\n",
      "const int areaMinX = max(primaryMinX - borderSize, xMIN);\n",
      "const int areaMinY = max(primaryMinY - borderSize, yMIN);\n",
      "const int areaMaxX = min(primaryMaxX + borderSize, xMAX);\n",
      "const int areaMaxY = min(primaryMaxY + borderSize, yMAX);\n",
      "const r1x = 3;\n",
      "const r1y = 0;\n",
      "// We are done when we reach max x location\n",
      "formula finish = started & (!bad) & (x = xMAX | x = primaryMinX - 1 | x = primaryMinX - 2| y = primaryMinY - 1 | y = primaryMinY - 2 | x = primaryMaxX + 1 | x = primaryMaxX + 2| y = primaryMaxY + 1 | y = primaryMaxY + 2);\n",
      "observable \"seefinish\" = finish;\n",
      "formula maxdist = xMAX-xMIN+yMAX-yMIN;\n",
      "formula good = finish & done;\n",
      "formula r1dist = max(r1x-x,x-r1x) + max(r1y-y,y-r1y);\n",
      "formula bad = (r1dist=0 & !r1qual);\n",
      "formula normdistr1 = (r1dist <= 1) ? 1 : 2; // min(1+((r1dist-1)/maxdist), 1.0)\n",
      "observable \"atr1\" = r1dist <= 0;\n",
      "observable \"nearr1\" = r1dist <= 1;\n",
      "observable \"seebad\" = bad;\n",
      "observable \"seegood\" = good;\n",
      "module master\n",
      "started : bool init false;\n",
      "done : bool init false;\n",
      "\n",
      "[placement] !started -> (started'=true);\n",
      "[north] started & !done -> true;\n",
      "[south] started  & !done -> true;\n",
      "[east] started  & !done-> true;\n",
      "[west] started & !done -> true;\n",
      "[finish] finish | done -> (done'=true);\n",
      "endmodule\n",
      "module robot\n",
      "x : [areaMinX..areaMaxX] init primaryMinX;\n",
      "y : [areaMinY..areaMaxX] init primaryMinY;\n",
      "\n",
      "[west] true -> (1-slippery): (x'=max(x-1,areaMinX)) + slippery: (x'=max(x-2,areaMinX));\n",
      "[east] true -> (1-slippery): (x'=min(x+1,areaMaxX)) + slippery: (x'=min(x+2,areaMaxX));\n",
      "[south]  true -> (1-slippery): (y'=min(y+1,areaMaxY)) + slippery: (y'=min(y+2,areaMaxY));\n",
      "[north]  true -> (1-slippery): (y'=max(y-1,areaMinY)) + slippery: (y'=max(y-2,areaMinY));\n",
      "endmodule\n",
      "module rock1\n",
      "r1qual : bool init false;\n",
      "r1taken : bool init false;\n",
      "r1lastobs : bool init false;\n",
      "[placement] true -> goodrock : (r1qual'=true) + (1-goodrock) : (r1qual'=false);\n",
      "\n",
      "[r1sample] r1dist = 0 & started & !done & !bad & !finish & !r1taken-> 1:(r1taken'=(x = r1x & y = r1y & !r1taken));\n",
      "[r1sample] r1dist = 0 & started & !done & !bad & !finish & r1taken -> true;\n",
      "\n",
      "[r1sense] started & !r1taken & !done & !bad & !finish -> (1/normdistr1): (r1lastobs'=r1qual) +  (1-(1/normdistr1)): (r1lastobs'=!r1qual);\n",
      "[north] true -> (r1lastobs'=false);\n",
      "[south] true -> (r1lastobs'=false);\n",
      "[east] true -> (r1lastobs'=false);\n",
      "[west] true -> (r1lastobs'=false);\n",
      "endmodule\n",
      "label \"notbad\" = !bad;\n",
      "label \"goal\" = good;\n",
      "rewards \"rew\"\n",
      "[r1sample] r1qual & !r1taken : 100;\n",
      "[finish] ((!r1qual) | (r1taken)): 100;\n",
      "[finish] true: 20;\n",
      "endrewards\n",
      "rewards \"cos\"\n",
      "//[r1sample] !r1qual & !r1taken : 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r2sample] !r2qual & !r1taken: 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r1sample] r1taken : 20;\n",
      "//[r2sample] r2taken : 20;\n",
      "[finish] !((!r1qual) | (r1taken)): 100;\n",
      "bad:20;\n",
      "[east] true: 1;\n",
      "[west] true: 1;\n",
      "[north] true: 1;\n",
      "[south] true: 1;\n",
      "[r1sense] true: 1;\n",
      "[r1sample] true: 1;\n",
      "endrewards\n",
      "pomdp\n",
      "observables\n",
      "started, r2taken, done\n",
      "endobservables\n",
      "const int N;\n",
      "const int xMAX = N-1;\n",
      "const int yMAX = N-1;\n",
      "const int xMIN = 0;\n",
      "const int yMIN = 0;\n",
      "const double slippery = 0.1;\n",
      "// How likely is a rock a good rock\n",
      "const double goodrock = 0.5;\n",
      "const int primaryMinX = 0;\n",
      "const int primaryMinY = 4;\n",
      "const int primaryMaxX = 3;\n",
      "const int primaryMaxY = 7;\n",
      "const int borderSize = 2;\n",
      "const int areaMinX = max(primaryMinX - borderSize, xMIN);\n",
      "const int areaMinY = max(primaryMinY - borderSize, yMIN);\n",
      "const int areaMaxX = min(primaryMaxX + borderSize, xMAX);\n",
      "const int areaMaxY = min(primaryMaxY + borderSize, yMAX);\n",
      "const r2x = 3;\n",
      "const r2y = 5;\n",
      "// We are done when we reach max x location\n",
      "formula finish = started & (!bad) & (x = xMAX | x = primaryMinX - 1 | x = primaryMinX - 2| y = primaryMinY - 1 | y = primaryMinY - 2 | x = primaryMaxX + 1 | x = primaryMaxX + 2| y = primaryMaxY + 1 | y = primaryMaxY + 2);\n",
      "observable \"seefinish\" = finish;\n",
      "formula maxdist = xMAX-xMIN+yMAX-yMIN;\n",
      "formula good = finish & done;\n",
      "formula r2dist = max(r2x-x,x-r2x) + max(r2y-y,y-r2y);\n",
      "formula bad = (r2dist=0 & !r2qual);\n",
      "formula normdistr2 = (r2dist <= 1) ? 1 : 2; // min(1+((r2dist-1)/maxdist), 1.0)\n",
      "observable \"atr2\" = r2dist <= 0;\n",
      "observable \"nearr2\" = r2dist <= 1;\n",
      "observable \"seebad\" = bad;\n",
      "observable \"seegood\" = good;\n",
      "module master\n",
      "started : bool init false;\n",
      "done : bool init false;\n",
      "\n",
      "[placement] !started -> (started'=true);\n",
      "[north] started & !done -> true;\n",
      "[south] started  & !done -> true;\n",
      "[east] started  & !done-> true;\n",
      "[west] started & !done -> true;\n",
      "[finish] finish | done -> (done'=true);\n",
      "endmodule\n",
      "module robot\n",
      "x : [areaMinX..areaMaxX] init primaryMinX;\n",
      "y : [areaMinY..areaMaxX] init primaryMinY;\n",
      "\n",
      "[west] true -> (1-slippery): (x'=max(x-1,areaMinX)) + slippery: (x'=max(x-2,areaMinX));\n",
      "[east] true -> (1-slippery): (x'=min(x+1,areaMaxX)) + slippery: (x'=min(x+2,areaMaxX));\n",
      "[south]  true -> (1-slippery): (y'=min(y+1,areaMaxY)) + slippery: (y'=min(y+2,areaMaxY));\n",
      "[north]  true -> (1-slippery): (y'=max(y-1,areaMinY)) + slippery: (y'=max(y-2,areaMinY));\n",
      "endmodule\n",
      "module rock2\n",
      "r2qual : bool init false;\n",
      "r2taken : bool init false;\n",
      "r2lastobs : bool init false;\n",
      "[placement] true -> goodrock : (r2qual'=true) + (1-goodrock) : (r2qual'=false);\n",
      "\n",
      "[r2sample] r2dist = 0 & started & !done & !bad & !finish & !r2taken-> 1:(r2taken'=(x = r2x & y = r2y & !r2taken));\n",
      "[r2sample] r2dist = 0 & started & !done & !bad & !finish & r2taken -> true;\n",
      "\n",
      "[r2sense] started & !r2taken & !done & !bad & !finish -> (1/normdistr2): (r2lastobs'=r2qual) +  (1-(1/normdistr2)): (r2lastobs'=!r2qual);\n",
      "[north] true -> (r2lastobs'=false);\n",
      "[south] true -> (r2lastobs'=false);\n",
      "[east] true -> (r2lastobs'=false);\n",
      "[west] true -> (r2lastobs'=false);\n",
      "endmodule\n",
      "label \"notbad\" = !bad;\n",
      "label \"goal\" = good;\n",
      "rewards \"rew\"\n",
      "[r2sample] r2qual & !r2taken : 100;\n",
      "[finish] ((!r2qual) | (r2taken)): 100;\n",
      "[finish] true: 20;\n",
      "endrewards\n",
      "rewards \"cos\"\n",
      "//[r1sample] !r1qual & !r1taken : 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r2sample] !r2qual & !r1taken: 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r1sample] r1taken : 20;\n",
      "//[r2sample] r2taken : 20;\n",
      "[finish] !((!r2qual) | (r2taken)): 100;\n",
      "bad:20;\n",
      "[east] true: 1;\n",
      "[west] true: 1;\n",
      "[north] true: 1;\n",
      "[south] true: 1;\n",
      "[r2sense] true: 1;\n",
      "[r2sample] true: 1;\n",
      "endrewards\n",
      "pomdp\n",
      "observables\n",
      "started, r3taken, done\n",
      "endobservables\n",
      "const int N;\n",
      "const int xMAX = N-1;\n",
      "const int yMAX = N-1;\n",
      "const int xMIN = 0;\n",
      "const int yMIN = 0;\n",
      "const double slippery = 0.1;\n",
      "// How likely is a rock a good rock\n",
      "const double goodrock = 0.5;\n",
      "const int primaryMinX = 4;\n",
      "const int primaryMinY = 0;\n",
      "const int primaryMaxX = 7;\n",
      "const int primaryMaxY = 3;\n",
      "const int borderSize = 2;\n",
      "const int areaMinX = max(primaryMinX - borderSize, xMIN);\n",
      "const int areaMinY = max(primaryMinY - borderSize, yMIN);\n",
      "const int areaMaxX = min(primaryMaxX + borderSize, xMAX);\n",
      "const int areaMaxY = min(primaryMaxY + borderSize, yMAX);\n",
      "const r3x = 6;\n",
      "const r3y = 2;\n",
      "// We are done when we reach max x location\n",
      "formula finish = started & (!bad) & (x = xMAX | x = primaryMinX - 1 | x = primaryMinX - 2| y = primaryMinY - 1 | y = primaryMinY - 2 | x = primaryMaxX + 1 | x = primaryMaxX + 2| y = primaryMaxY + 1 | y = primaryMaxY + 2);\n",
      "observable \"seefinish\" = finish;\n",
      "formula maxdist = xMAX-xMIN+yMAX-yMIN;\n",
      "formula good = finish & done;\n",
      "formula r3dist = max(r3x-x,x-r3x) + max(r3y-y,y-r3y);\n",
      "formula bad = (r3dist=0 & !r3qual);\n",
      "formula normdistr3 = (r3dist <= 1) ? 1 : 2; // min(1+((r3dist-1)/maxdist), 1.0)\n",
      "observable \"atr3\" = r3dist <= 0;\n",
      "observable \"nearr3\" = r3dist <= 1;\n",
      "observable \"seebad\" = bad;\n",
      "observable \"seegood\" = good;\n",
      "module master\n",
      "started : bool init false;\n",
      "done : bool init false;\n",
      "\n",
      "[placement] !started -> (started'=true);\n",
      "[north] started & !done -> true;\n",
      "[south] started  & !done -> true;\n",
      "[east] started  & !done-> true;\n",
      "[west] started & !done -> true;\n",
      "[finish] finish | done -> (done'=true);\n",
      "endmodule\n",
      "module robot\n",
      "x : [areaMinX..areaMaxX] init primaryMinX;\n",
      "y : [areaMinY..areaMaxX] init primaryMinY;\n",
      "\n",
      "[west] true -> (1-slippery): (x'=max(x-1,areaMinX)) + slippery: (x'=max(x-2,areaMinX));\n",
      "[east] true -> (1-slippery): (x'=min(x+1,areaMaxX)) + slippery: (x'=min(x+2,areaMaxX));\n",
      "[south]  true -> (1-slippery): (y'=min(y+1,areaMaxY)) + slippery: (y'=min(y+2,areaMaxY));\n",
      "[north]  true -> (1-slippery): (y'=max(y-1,areaMinY)) + slippery: (y'=max(y-2,areaMinY));\n",
      "endmodule\n",
      "module rock3\n",
      "r3qual : bool init false;\n",
      "r3taken : bool init false;\n",
      "r3lastobs : bool init false;\n",
      "[placement] true -> goodrock : (r3qual'=true) + (1-goodrock) : (r3qual'=false);\n",
      "\n",
      "[r3sample] r3dist = 0 & started & !done & !bad & !finish & !r3taken-> 1:(r3taken'=(x = r3x & y = r3y & !r3taken));\n",
      "[r3sample] r3dist = 0 & started & !done & !bad & !finish & r3taken -> true;\n",
      "\n",
      "[r3sense] started & !r3taken & !done & !bad & !finish -> (1/normdistr3): (r3lastobs'=r3qual) +  (1-(1/normdistr3)): (r3lastobs'=!r3qual);\n",
      "[north] true -> (r3lastobs'=false);\n",
      "[south] true -> (r3lastobs'=false);\n",
      "[east] true -> (r3lastobs'=false);\n",
      "[west] true -> (r3lastobs'=false);\n",
      "endmodule\n",
      "label \"notbad\" = !bad;\n",
      "label \"goal\" = good;\n",
      "rewards \"rew\"\n",
      "[r3sample] r3qual & !r3taken : 100;\n",
      "[finish] ((!r3qual) | (r3taken)): 100;\n",
      "[finish] true: 20;\n",
      "endrewards\n",
      "rewards \"cos\"\n",
      "//[r1sample] !r1qual & !r1taken : 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r2sample] !r2qual & !r1taken: 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r1sample] r1taken : 20;\n",
      "//[r2sample] r2taken : 20;\n",
      "[finish] !((!r3qual) | (r3taken)): 100;\n",
      "bad:20;\n",
      "[east] true: 1;\n",
      "[west] true: 1;\n",
      "[north] true: 1;\n",
      "[south] true: 1;\n",
      "[r3sense] true: 1;\n",
      "[r3sample] true: 1;\n",
      "endrewards\n",
      "pomdp\n",
      "observables\n",
      "started, done\n",
      "endobservables\n",
      "const int N;\n",
      "const int xMAX = N-1;\n",
      "const int yMAX = N-1;\n",
      "const int xMIN = 0;\n",
      "const int yMIN = 0;\n",
      "const double slippery = 0.1;\n",
      "// How likely is a rock a good rock\n",
      "const double goodrock = 0.5;\n",
      "const int primaryMinX = 4;\n",
      "const int primaryMinY = 4;\n",
      "const int primaryMaxX = 7;\n",
      "const int primaryMaxY = 7;\n",
      "const int borderSize = 2;\n",
      "const int areaMinX = max(primaryMinX - borderSize, xMIN);\n",
      "const int areaMinY = max(primaryMinY - borderSize, yMIN);\n",
      "const int areaMaxX = min(primaryMaxX + borderSize, xMAX);\n",
      "const int areaMaxY = min(primaryMaxY + borderSize, yMAX);\n",
      "// We are done when we reach max x location\n",
      "formula finish = started & (!bad) & (x = xMAX | x = primaryMinX - 1 | x = primaryMinX - 2| y = primaryMinY - 1 | y = primaryMinY - 2 | x = primaryMaxX + 1 | x = primaryMaxX + 2| y = primaryMaxY + 1 | y = primaryMaxY + 2);\n",
      "observable \"seefinish\" = finish;\n",
      "formula maxdist = xMAX-xMIN+yMAX-yMIN;\n",
      "formula good = finish & done;\n",
      "formula bad = false;\n",
      "observable \"seebad\" = bad;\n",
      "observable \"seegood\" = good;\n",
      "module master\n",
      "started : bool init false;\n",
      "done : bool init false;\n",
      "\n",
      "[placement] !started -> (started'=true);\n",
      "[north] started & !done -> true;\n",
      "[south] started  & !done -> true;\n",
      "[east] started  & !done-> true;\n",
      "[west] started & !done -> true;\n",
      "[finish] finish | done -> (done'=true);\n",
      "endmodule\n",
      "module robot\n",
      "x : [areaMinX..areaMaxX] init primaryMinX;\n",
      "y : [areaMinY..areaMaxX] init primaryMinY;\n",
      "\n",
      "[west] true -> (1-slippery): (x'=max(x-1,areaMinX)) + slippery: (x'=max(x-2,areaMinX));\n",
      "[east] true -> (1-slippery): (x'=min(x+1,areaMaxX)) + slippery: (x'=min(x+2,areaMaxX));\n",
      "[south]  true -> (1-slippery): (y'=min(y+1,areaMaxY)) + slippery: (y'=min(y+2,areaMaxY));\n",
      "[north]  true -> (1-slippery): (y'=max(y-1,areaMinY)) + slippery: (y'=max(y-2,areaMinY));\n",
      "endmodule\n",
      "label \"notbad\" = !bad;\n",
      "label \"goal\" = good;\n",
      "rewards \"rew\"\n",
      "[finish] true: 20;\n",
      "endrewards\n",
      "rewards \"cos\"\n",
      "//[r1sample] !r1qual & !r1taken : 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r2sample] !r2qual & !r1taken: 10; // no need; cause it won't r1sample is not enabled if !r1qual\n",
      "//[r1sample] r1taken : 20;\n",
      "//[r2sample] r2taken : 20;\n",
      "bad:20;\n",
      "[east] true: 1;\n",
      "[west] true: 1;\n",
      "[north] true: 1;\n",
      "[south] true: 1;\n",
      "endrewards\n",
      "['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'constants', 'cost', 'cost_2', 'formula_bad', 'formula_dist', 'formula_finish', 'formula_good', 'formula_maxdist', 'formula_normdist', 'formula_observable', 'generate_rock_file', 'generate_rocks', 'grid', 'in_bound', 'labels', 'master', 'move', 'observable_at', 'observable_finish', 'observable_good_bad', 'observable_near', 'one_rock', 'plot_board', 'preamble', 'primary_grid', 'reward', 'reward_cost', 'robot', 'rock_positions', 'rocks', 'sys']\n"
     ]
    }
   ],
   "source": [
    "# generate_rock_file(N, R, is_main, lx, ly, rx, ry, file = sys.stdout):\n",
    "N = 8; R = 3\n",
    "shieldSize = 4\n",
    "shieldSizeX = 4\n",
    "shieldSizeY = 4   \n",
    "xMAX = N - 1\n",
    "yMAX = N - 1\n",
    "for lx in range(0, xMAX, shieldSizeX):\n",
    "  for ly in range(0, yMAX, shieldSizeY):\n",
    "    rx, ry = lx + shieldSizeX - 1, ly + shieldSizeY - 1\n",
    "    file_name = \"rocks_N{}R_factored{}-{}-{}-{}-{}-{}.nm\".format(N, R, shieldSize, lx, ly, rx, ry)\n",
    "    file = open(file_name, 'w')\n",
    "    generate_rock_file(N, R, False, lx, ly, rx, ry, file)\n",
    "    file.close()\n",
    "\n",
    "\n",
    "print(dir(rock_utility))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c362917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'constants', 'cost', 'cost_2', 'formula_bad', 'formula_dist', 'formula_finish', 'formula_good', 'formula_maxdist', 'formula_normdist', 'formula_observable', 'generate_rock_file', 'generate_rocks', 'grid', 'in_bound', 'labels', 'master', 'move', 'observable_at', 'observable_finish', 'observable_good_bad', 'observable_near', 'one_rock', 'plot_board', 'preamble', 'primary_grid', 'reward', 'reward_cost', 'robot', 'rock_positions', 'rocks', 'sys']\n"
     ]
    }
   ],
   "source": [
    "print(dir(rock_utility))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
