mdp
const int M = 7;
const int N = 5;
const double p=0.09; // with probability p, staying in place occurs due to seeing and control noise

formula office = ( (r>3 & r<6) &(c>3 & c<8));
formula decoration = ( (r=1 & c=3) | (r=2 & c=5) );
formula coffee = (r=1 & c=7);
formula wall = ((r=3 & (c>2 & c<8)) | (r=5 & c=3));

module robot
	//define robot position
	r:[1..N] init 4; //grid row
	c:[1..M] init 1; //grid column

	// transitions
	[east]  (c<M | c=M)  -> p/3:(r'=min(r+1, N))+ p/3: (c'=max(c-1, 1))+ p/3: (r'=max(r-1, 1)) + (1-p): (c'=min(c+1, M));
	[south] (r<N | r=N) -> (1-p):(r'=min(r+1, N)) + p/3: (c'=min(c+1, M)) + p/3:(r'=max(r-1, 1))+ p/3: (c'=max(c-1, 1));
	[west]  (c>1 | c=1)  -> p/3:(r'=max(r-1, 1))+ p/3:(r'=min(r+1, N))+ p/3: (c'=min(c+1, M)) + (1-p): (c'=max(c-1, 1));
	[north] (r=1 | r>1)  -> (1-p):(r'=max(r-1, 1)) + p/3: (c'=max(c-1, 1)) + p/3: (c'=min(c+1, M)) + p/3:(r'=min(r+1, N));

	// terminal state self-loop to avoid deadlock
	// [] office & got_coffee -> true;

endmodule

// label "goal" = F(coffee & (F office));
label "obs" = decoration;

rewards

	[east] !decoration & !wall: 1;
	[south] !decoration & !wall: 1;
	[west] !decoration & !wall: 1;
	[north] !decoration & !wall: 1;

	// wall
	[east] !decoration & wall: 35;
	[south] !decoration & wall: 35;
	[west] !decoration & wall: 35;
	[north] !decoration & wall: 35;

	// decoration
    [east] decoration & !wall: 10;
    [south] decoration & !wall: 10;
    [west] decoration & !wall: 10;
    [north] decoration & !wall: 10;

endrewards
