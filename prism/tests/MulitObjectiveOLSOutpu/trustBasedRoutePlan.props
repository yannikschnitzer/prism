const double w1;
const double w2 = 1.0 - w1;

// commnad line example: bin/prism trustBasedRoutePlan.prism trustBasedRoutePlan.props -prop 1 -const w1=0:0.01:1 -ex

<<*>> (w1 * R{"destinationTrust"}max=? [ F "end" ] + w2 * R{"satisfaction"}max=? [ F "end" ]);
<<*>> (w1 * R{"destinationTrust"}max=? [ F "end" ] + w2 * R{"distance"}min=? [ F "end" ]);
<<*>> (w1 * R{"destinationTrust"}max=? [ F "end" ] + w2 * R{"energyConsumption"}min=? [ F "end" ]);
<<*>> (w1 * R{"destinationTrust"}max=? [ F "end" ] + w2 * R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);

<<*>> (w1 * R{"averageTrust"}max=? [ F "end" ] + w2 * R{"satisfaction"}max=? [ F "end" ]);
<<*>> (w1 * R{"averageTrust"}max=? [ F "end" ] + w2 * R{"distance"}min=? [ F "end" ]);
<<*>> (w1 * R{"averageTrust"}max=? [ F "end" ] + w2 * R{"energyConsumption"}min=? [ F "end" ]);
<<*>> (w1 * R{"averageTrust"}max=? [ F "end" ] + w2 * R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);

//alternative property
//commnad line example: bin/prism trustBasedRoutePlanning.prism trustBasedRoutePlanning.props -prop 9 -ex
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"satisfaction"}max=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"distance"}min=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"energyConsumption"}min=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);

<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"satisfaction"}max=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"distance"}min=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"energyConsumption"}min=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);



<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"satisfaction"}max=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"distance"}min=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"energyConsumption"}min=? [ F "end" ]);
<<*>> ( R{"destinationTrust"}max=? [ F "end" ], R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);

<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"satisfaction"}max=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"distance"}min=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"energyConsumption"}min=? [ F "end" ]);
<<*>> ( R{"averageTrust"}max=? [ F "end" ], R{"averageEnergyConsumptionRate"}min=? [ F "end" ]);


R{"satisfaction"}max=?[F "end"];
R{"destinationTrust"}max=?[F "end"];
R{"averageTrust"}max=?[F "end"];
R{"distance"}min=?[F "end"];
R{"energyConsumption"}min=?[F "end"];
R{"averageEnergyConsumptionRate"}min=?[F "end"];
