mdp

const int rN = 14;
const int cN = 11;  


module agent
	
	// define agent position
	r:[1..rN] init rN;  // row
	c:[1..cN] init 1;  // column

	// windy room: affetced by wind stregth 1 at column 2, and stregth 2 at column 3-5
	// prob 0.1 of moving a random direction
	[north] c=1 -> 0.9:(r'=max(r-1, 1)) + 0.1:(r'=min(r+1,rN));
	[south] c=1 -> 0.9:(r'=min(r+1, rN)) + 0.1:(r'=max(r-1,1));
	[east] c=1 -> 0.9:(c'=c+1)&(r'=max(r-1, 1))+ 0.1:(r'=min(r+1,rN));

	[north] c=2 -> 0.9:(r'=max(r-2, 1)) + 0.1:(r'=min(r,rN));
	[south] c=2 -> 0.9:(r'=min(r, rN)) + 0.1:(r'=max(r-2,1));
	[east] c=2 -> 0.9:(c'=c+1)&(r'=max(r-2, 1)) + 0.1:(r'=min(r,rN));
	[west] c=2 -> 0.9:(c'=c-1) + 0.1:(r'=min(r,rN));

	[north] c=3 -> 0.9:(r'=max(r-3, 1)) + 0.1:(r'=max(r-1,1));
	[south]	c=3 -> 0.9:(r'=max(r-1,1)) + 0.1:(r'=max(r-2,1));
	[east]	c=3 -> 0.9:(c'=c+1)&(r'=max(r-2, 1)) + 0.1:(r'=max(r-1,1)); 
	[west] c=3 -> 0.9:(c'=c-1)&(r'=max(r-1, 1)) + 0.1:(r'=max(r-1,1)); 

	[north] c=4 -> 0.9:(r'=max(r-3, 1)) + 0.1:(r'=max(r-1,1));
	[south]	c=4 -> 0.9:(r'=max(r-1,1)) + 0.1:(r'=max(r-2,1));
	[east]	c=4 -> 0.9:(c'=c+1)&(r'=max(r-2, 1)) + 0.1:(r'=max(r-1,1)); 
	[west] c=4 -> 0.9:(c'=c-1)&(r'=max(r-2, 1)) + 0.1:(r'=max(r-1,1)); 

	[north] c=5 -> 0.9:(r'=max(r-3, 1)) + 0.1:(r'=max(r-1,1));
	[south]	c=5 -> 0.9:(r'=max(r-1,1)) + 0.1:(r'=max(r-2,1));
	[west] c=5 -> 0.9:(c'=c-1)&(r'=max(r-2, 1)) + 0.1:(r'=max(r-1,1)); 

	[east] c=6 & r=4 -> 0.9:(c'=7) + 0.1:(c'=5) & (r'=2);
	[west] c=6 & r=4 -> 0.9:(c'=5) & (r'=2) + 0.1: (c'=7);

	[north] c>=7 & c<cN -> 0.9:(r'=max(r-1, 1)) + 0.1:(r'=min(r+1,rN));
	[south] c>=7 & c<cN -> 0.9:(r'=min(r+1, rN)) + 0.1:(r'=max(r-1,1));
	[east] c>=7 & c<cN -> 0.9:(c'=c+1) + 0.1:(r'=min(r+1,rN));
	[west] c>7 & c<cN -> 0.9:(c'=c-1) + 0.1:(r'=min(r+1,rN)); // c7 cannot move west, since c6 is wall

	[north] c=cN & r!=rN -> 0.9:(r'=max(r-1, 1)) + 0.1:(r'=min(r+1,rN));
	[south] c=cN & r!=rN -> 0.9:(r'=min(r+1, rN)) + 0.1:(r'=max(r-1,1));
	[west] c=cN & r!=rN -> 0.9:(c'=c-1) + 0.1:(r'=min(r+1,rN)); 

	// terminal state self-loop to avoid deadlock
	[] r=rN & c=cN -> true;

endmodule 

label "goal" = r=rN & c=cN; 

rewards
	[north] true: 1;
	[south] true: 1;
	[east] true: 1;
	[west] true: 1;
endrewards







